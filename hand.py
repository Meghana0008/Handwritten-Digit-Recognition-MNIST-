# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RusFIV0_v40Ijl04x8zlXxLIQ_PjeP6F
"""

import tensorflow as tf
from tensorflow.keras import layers, models

# Load MNIST dataset
mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Normalize the data
x_train, x_test = x_train / 255.0, x_test / 255.0

# Build the model
model = models.Sequential([
    layers.Reshape((28, 28, 1), input_shape=(28, 28)),
    layers.Conv2D(32, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64, (3,3), activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

# Save the trained model
model.save("mnist_model.h5")
print("Model saved as 'mnist_model.h5'")

import ipywidgets as widgets
from IPython.display import display
from PIL import Image
import io
import numpy as np

upload_button = widgets.FileUpload(accept='.png,.jpg,.jpeg', multiple=False)

def on_upload_change(change):
    """Handle uploaded file and make a prediction."""
    uploaded_file = next(iter(upload_button.value.values()))
    image = Image.open(io.BytesIO(uploaded_file['content'])).convert('L')  # Convert to grayscale
    image = image.resize((28, 28))
    image = np.array(image) / 255.0  # Normalize pixel values
    image = image.reshape(1, 28, 28, 1)

    prediction = model.predict(image)
    digit = np.argmax(prediction)

    print(f"Predicted Digit: {digit}")

upload_button.observe(on_upload_change, names='_counter')
display(upload_button)